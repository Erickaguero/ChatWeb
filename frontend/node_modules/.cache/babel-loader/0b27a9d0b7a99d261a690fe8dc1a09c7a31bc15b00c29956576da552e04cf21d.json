{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api';\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Interceptor para agregar token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\nexport const chatService = {\n  async getOnlineUsers() {\n    try {\n      const response = await api.get('/users/online');\n      return response.data;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Error obteniendo usuarios online');\n    }\n  },\n  async getMessages(userId, page = 1, limit = 50) {\n    try {\n      const response = await api.get(`/chat/messages/${userId}?page=${page}&limit=${limit}`);\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Error obteniendo mensajes');\n    }\n  },\n  async getConversations() {\n    try {\n      const response = await api.get('/chat/conversations');\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Error obteniendo conversaciones');\n    }\n  }\n};","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","chatService","getOnlineUsers","response","get","data","error","_error$response","_error$response$data","Error","message","getMessages","userId","page","limit","_error$response2","_error$response2$data","getConversations","_error$response3","_error$response3$data"],"sources":["C:/Users/erick/CascadeProjects/ChatWeb/frontend/src/services/chatService.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:5000/api';\n\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Interceptor para agregar token\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\nexport const chatService = {\n  async getOnlineUsers() {\n    try {\n      const response = await api.get('/users/online');\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Error obteniendo usuarios online');\n    }\n  },\n\n  async getMessages(userId: string, page = 1, limit = 50) {\n    try {\n      const response = await api.get(`/chat/messages/${userId}?page=${page}&limit=${limit}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Error obteniendo mensajes');\n    }\n  },\n\n  async getConversations() {\n    try {\n      const response = await api.get('/chat/conversations');\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Error obteniendo conversaciones');\n    }\n  }\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2BAA2B;AAE3C,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,OAAO;EAChBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;AAEF,OAAO,MAAMK,WAAW,GAAG;EACzB,MAAMC,cAAcA,CAAA,EAAG;IACrB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMd,GAAG,CAACe,GAAG,CAAC,eAAe,CAAC;MAC/C,OAAOD,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAU,EAAE;MAAA,IAAAC,eAAA,EAAAC,oBAAA;MACnB,MAAM,IAAIC,KAAK,CAAC,EAAAF,eAAA,GAAAD,KAAK,CAACH,QAAQ,cAAAI,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBF,IAAI,cAAAG,oBAAA,uBAApBA,oBAAA,CAAsBE,OAAO,KAAI,kCAAkC,CAAC;IACtF;EACF,CAAC;EAED,MAAMC,WAAWA,CAACC,MAAc,EAAEC,IAAI,GAAG,CAAC,EAAEC,KAAK,GAAG,EAAE,EAAE;IACtD,IAAI;MACF,MAAMX,QAAQ,GAAG,MAAMd,GAAG,CAACe,GAAG,CAAC,kBAAkBQ,MAAM,SAASC,IAAI,UAAUC,KAAK,EAAE,CAAC;MACtF,OAAOX,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAU,EAAE;MAAA,IAAAS,gBAAA,EAAAC,qBAAA;MACnB,MAAM,IAAIP,KAAK,CAAC,EAAAM,gBAAA,GAAAT,KAAK,CAACH,QAAQ,cAAAY,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBV,IAAI,cAAAW,qBAAA,uBAApBA,qBAAA,CAAsBN,OAAO,KAAI,2BAA2B,CAAC;IAC/E;EACF,CAAC;EAED,MAAMO,gBAAgBA,CAAA,EAAG;IACvB,IAAI;MACF,MAAMd,QAAQ,GAAG,MAAMd,GAAG,CAACe,GAAG,CAAC,qBAAqB,CAAC;MACrD,OAAOD,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAU,EAAE;MAAA,IAAAY,gBAAA,EAAAC,qBAAA;MACnB,MAAM,IAAIV,KAAK,CAAC,EAAAS,gBAAA,GAAAZ,KAAK,CAACH,QAAQ,cAAAe,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBb,IAAI,cAAAc,qBAAA,uBAApBA,qBAAA,CAAsBT,OAAO,KAAI,iCAAiC,CAAC;IACrF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}